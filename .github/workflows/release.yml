name: release
  
permissions:
  contents: write

on:
  push:
    branches:
      - main
  workflow_call:
    inputs:
      tag:
        description: 'Tag to create'
        required: true
        default: 'v1.0.0'  # Starting version
        type: string

jobs:
  run:
    name: Release
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # Set the OpenAI API key as an environment variable
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
            
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Install catgpt
        run: go install github.com/ibuildthecloud/catgpt@main

      - name: Get latest release tag
        id: get_latest_tag
        run: echo "::set-output name=latest_tag::$(git describe --tags --abbrev=0)"

      - name: Calculate next version
        id: calculate_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          version=$(echo "$latest_tag" | sed 's/v//' | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "::set-output name=next_version::v$version"

      - name: Generate release message
        id: generate_release_message
        run: |
          echo "🚀 New Features:" > release_message.txt
          cat $(find . -name "*.go") | catgpt "Create a list of new features" >> release_message.txt
          echo "" >> release_message.txt
          echo "🔧 Enhancements:" >> release_message.txt
          cat $(find . -name "*.go") | catgpt "Create a list of enhancements" >> release_message.txt
          echo "" >> release_message.txt
          echo "🔒 Security:" >> release_message.txt
          cat $(find . -name "*.go") | catgpt "Create a list of security updates" >> release_message.txt
          echo "" >> release_message.txt
          echo "📝 Improvements:" >> release_message.txt
          cat $(find . -name "*.go") | catgpt "Create a list of improvements" >> release_message.txt
          echo "" >> release_message.txt
          echo "🔨 Refactor:" >> release_message.txt
          cat $(find . -name "*.go") | catgpt "Create a list of refactorings" >> release_message.txt
          echo "" >> release_message.txt
          echo "📚 Documentation:" >> release_message.txt
          cat $(find . -name "*.go") | catgpt "Create a list of documentation changes" >> release_message.txt
          echo "" >> release_message.txt
          echo "👉 For detailed release notes and usage information, please refer to the documentation or run `rancher-projects --help`." >> release_message.txt
          echo "" >> release_message.txt
          echo "🌟 Thank you for using Rancher Projects! Let us know your feedback and suggestions for future improvements. Happy deploying! 🚢✨" >> release_message.txt
          echo "###############################################"
          cat release_message.txt
          echo "###############################################"

      - name: Create release
        if: github.ref == 'refs/heads/main'  # Only create release if triggered by main branch
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh release create ${{ steps.calculate_version.outputs.next_version }} -F release_message.txt

      - name: Create annotated tag
        if: github.ref == 'refs/heads/main'  # Only create tag if triggered by main branch
        run: |
          git config --global user.email "mmattox@support.tools"
          git config --global user.name "Matthew Mattox"
          git tag -a ${{ steps.calculate_version.outputs.next_version }} -m ${{ steps.calculate_version.outputs.next_version }}

      - name: Run GoReleaser
        if: github.ref == 'refs/heads/main'  # Only run GoReleaser if triggered by main branch
        uses: goreleaser/goreleaser-action@94b86e1b0200cc3baefc577476f7d63bc69ad382
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
